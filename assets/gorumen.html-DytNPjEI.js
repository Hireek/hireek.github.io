import{_ as p,c as t,b as s,a as e,d as l,e as i,r as c,o}from"./app-B4ALHgv8.js";const u={},r={href:"https://www.topgoer.com/go%E5%9F%BA%E7%A1%80/%E6%8C%87%E9%92%88.html",target:"_blank",rel:"noopener noreferrer"};function d(k,n){const a=c("ExternalLinkIcon");return o(),t("div",null,[n[1]||(n[1]=s("h2",{id:"go",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#go"},[s("span",null,"GO")])],-1)),n[2]||(n[2]=s("p",null,"gprc、grom、gin、go-micro...",-1)),n[3]||(n[3]=s("h3",{id:"指针",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#指针"},[s("span",null,"指针")])],-1)),s("p",null,[s("a",r,[n[0]||(n[0]=l("指针")),i(a)])]),n[4]||(n[4]=e(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// * &amp;</span></span>
<span class="line"><span class="token comment">// 方法返回值为*T时，会发生内存逃逸。c语言则会error</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	namePtr <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token operator">*</span>namePtr <span class="token operator">=</span> <span class="token string">&quot;Feng&quot;</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;namePtr :&quot;</span><span class="token punctuation">,</span> namePtr<span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;namePtr 值:&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>namePtr<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	name2 <span class="token operator">:=</span> <span class="token string">&quot;wwww&quot;</span></span>
<span class="line"></span>
<span class="line">	name2Ptr <span class="token operator">:=</span> <span class="token operator">&amp;</span>name2</span>
<span class="line"></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;name2Ptr :&quot;</span><span class="token punctuation">,</span> name2Ptr<span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;name2 值:&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>name2Ptr<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="go-协程" tabindex="-1"><a class="header-anchor" href="#go-协程"><span>go/协程</span></a></h3><h3 id="go-exit" tabindex="-1"><a class="header-anchor" href="#go-exit"><span>Go exit</span></a></h3><h3 id="channel" tabindex="-1"><a class="header-anchor" href="#channel"><span>channel</span></a></h3><p>无缓冲</p><p>有缓冲</p><p>for range</p><p>单向和双向管道</p><p>Select case</p><h3 id="server-demo" tabindex="-1"><a class="header-anchor" href="#server-demo"><span>Server Demo</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> socket</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;fmt&quot;</span></span>
<span class="line">	<span class="token string">&quot;net&quot;</span></span>
<span class="line">	<span class="token string">&quot;strings&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// 创建监听</span></span>
<span class="line">	ip <span class="token operator">:=</span> <span class="token string">&quot;127.0.0.1&quot;</span></span>
<span class="line">	port <span class="token operator">:=</span> <span class="token string">&quot;8848&quot;</span></span>
<span class="line">	address <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:%d&quot;</span><span class="token punctuation">,</span> ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span></span>
<span class="line">	listen<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;register === err.Error()&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token comment">// Accept() (Conn, error)</span></span>
<span class="line">	conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> listen<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;accept === err.Error()&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token comment">// Read(b []byte) (n int, err error)</span></span>
<span class="line">	cnt<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;conn.Read === err.Error()&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;收到客户端---&gt;的数据，长度：&quot;</span><span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> <span class="token string">&quot;数据:&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	serRes <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	cnt<span class="token punctuation">,</span> err <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>serRes<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;服务端发送---&gt;客户端的数据，长度：&quot;</span><span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> <span class="token string">&quot;数据:&quot;</span><span class="token punctuation">,</span> serRes<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="client" tabindex="-1"><a class="header-anchor" href="#client"><span>Client</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;fmt&quot;</span></span>
<span class="line">	<span class="token string">&quot;net&quot;</span></span>
<span class="line">	<span class="token string">&quot;time&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	con<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;:8848&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;net.Dia === err.Error()&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">return</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;client连接建立成功&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">for</span> <span class="token punctuation">{</span></span>
<span class="line">		sendData <span class="token operator">:=</span> <span class="token string">&quot;Hello, world&quot;</span></span>
<span class="line">		cnt<span class="token punctuation">,</span> err <span class="token operator">:=</span> con<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>sendData<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;con.Write === err.Error()&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">			<span class="token keyword">return</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;客户端发送---&gt;服务端的数据，长度：&quot;</span><span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> <span class="token string">&quot;数据:&quot;</span><span class="token punctuation">,</span> sendData<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">		buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span></span>
<span class="line">		cnt<span class="token punctuation">,</span> err <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;con.Read === err.Error()&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">			<span class="token keyword">return</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;客户端接收&lt;----服务端的数据，长度：&quot;</span><span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> <span class="token string">&quot;数据:&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">//con.Close()</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="multiply-socket-server" tabindex="-1"><a class="header-anchor" href="#multiply-socket-server"><span>multiply socket Server</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">   <span class="token string">&quot;fmt&quot;</span></span>
<span class="line">   <span class="token string">&quot;net&quot;</span></span>
<span class="line">   <span class="token string">&quot;strings&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token comment">// 创建监听</span></span>
<span class="line">   ip <span class="token operator">:=</span> <span class="token string">&quot;127.0.0.1&quot;</span></span>
<span class="line">   port <span class="token operator">:=</span> <span class="token number">8848</span></span>
<span class="line">   address <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:%d&quot;</span><span class="token punctuation">,</span> ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span></span>
<span class="line">   listen<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span></span>
<span class="line">   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;register === err.Error()&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">return</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;服务端监听ing...&quot;</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Accept() (Conn, error)</span></span>
<span class="line">      conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> listen<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">         fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;accept === err.Error()&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">go</span> <span class="token function">handle</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">handle</span><span class="token punctuation">(</span>conn net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;建立连接成功===&quot;</span><span class="token punctuation">,</span> conn<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">      buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token comment">// Read(b []byte) (n int, err error)，阻塞</span></span>
<span class="line">      cnt<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">         fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;conn.Read === err.Error()&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;收到客户端---&gt;的数据，长度：&quot;</span><span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> <span class="token string">&quot;数据:&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      serRes <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      cnt<span class="token punctuation">,</span> err <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>serRes<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;服务端发送---&gt;客户端的数据，长度：&quot;</span><span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> <span class="token string">&quot;数据:&quot;</span><span class="token punctuation">,</span> serRes<span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">   <span class="token comment">// _ = conn.Close()</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="http-client" tabindex="-1"><a class="header-anchor" href="#http-client"><span>Http-client</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">   <span class="token string">&quot;fmt&quot;</span></span>
<span class="line">   <span class="token string">&quot;io/ioutil&quot;</span></span>
<span class="line">   <span class="token string">&quot;net/http&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   client <span class="token operator">:=</span> http<span class="token punctuation">.</span>Client<span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">   resp<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;https://blog.alane.top&quot;</span><span class="token punctuation">)</span></span>
<span class="line">   body <span class="token operator">:=</span> resp<span class="token punctuation">.</span>Body</span>
<span class="line">   all<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span></span>
<span class="line">   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;====&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="http-server" tabindex="-1"><a class="header-anchor" href="#http-server"><span>http-server</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">   <span class="token string">&quot;fmt&quot;</span></span>
<span class="line">   <span class="token string">&quot;io&quot;</span></span>
<span class="line">   <span class="token string">&quot;net/http&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">   <span class="token comment">// 路由，func回调函数</span></span>
<span class="line">   http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>writer http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>writer<span class="token punctuation">,</span> <span class="token string">&quot;user返回&quot;</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">if</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:8080&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;server error ===&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">return</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="json序列化" tabindex="-1"><a class="header-anchor" href="#json序列化"><span>json序列化</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">   <span class="token string">&quot;encoding/json&quot;</span></span>
<span class="line">   <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">   Name   <span class="token builtin">string</span></span>
<span class="line">   Age    <span class="token builtin">int</span></span>
<span class="line">   Id     <span class="token builtin">int64</span></span>
<span class="line">   gender <span class="token builtin">int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">   feng <span class="token operator">:=</span> Student<span class="token punctuation">{</span></span>
<span class="line">      Id<span class="token punctuation">:</span>     <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">      Name<span class="token punctuation">:</span>   <span class="token string">&quot;feng&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      Age<span class="token punctuation">:</span>    <span class="token number">18</span><span class="token punctuation">,</span></span>
<span class="line">      gender<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 小写 json序列化会忽略</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">   encodeInfo<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>feng<span class="token punctuation">)</span></span>
<span class="line">   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;json.Marshal(&amp;feng)===&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">return</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;encodeInfo&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>encodeInfo<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">   <span class="token keyword">var</span> feng2 Student</span>
<span class="line"></span>
<span class="line">   <span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>encodeInfo<span class="token punctuation">,</span><span class="token operator">&amp;</span>feng2<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;json.Unmarshal(&amp;feng2)===&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">return</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;feng2&quot;</span><span class="token punctuation">,</span>feng2<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Print...</p><div class="language-tex line-numbers-mode" data-highlighter="prismjs" data-ext="tex" data-title="tex"><pre><code><span class="line">encodeInfo <span class="token punctuation">{</span>&quot;Name&quot;:&quot;feng&quot;,&quot;Age&quot;:18,&quot;Id&quot;:1<span class="token punctuation">}</span></span>
<span class="line">feng2 <span class="token punctuation">{</span>feng 18 1 0<span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="json-label" tabindex="-1"><a class="header-anchor" href="#json-label"><span>Json label</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">   <span class="token string">&quot;encoding/json&quot;</span></span>
<span class="line">   <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> Teacher <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">   Name    <span class="token builtin">string</span> <span class="token string">\`json:&quot;-&quot;\`</span></span>
<span class="line">   Age     <span class="token builtin">int</span>    <span class="token string">\`json:&quot;age,string&quot;\`</span></span>
<span class="line">   Id      <span class="token builtin">int64</span></span>
<span class="line">   gender  <span class="token builtin">int</span></span>
<span class="line">   Address <span class="token builtin">string</span> <span class="token string">\`json:&quot;address,omitempty&quot;&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   tea <span class="token operator">:=</span> Teacher<span class="token punctuation">{</span></span>
<span class="line">      Name<span class="token punctuation">:</span>    <span class="token string">&quot;tea&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      Age<span class="token punctuation">:</span>     <span class="token number">19</span><span class="token punctuation">,</span></span>
<span class="line">      Id<span class="token punctuation">:</span>      <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">      gender<span class="token punctuation">:</span>  <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">      Address<span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">   encodeInfo<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tea<span class="token punctuation">)</span></span>
<span class="line">   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;json.Marshal(&amp;tea)===&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">return</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;encodeInfo&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>encodeInfo<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="聊天室实现" tabindex="-1"><a class="header-anchor" href="#聊天室实现"><span>聊天室实现</span></a></h3><h4 id="需求" tabindex="-1"><a class="header-anchor" href="#需求"><span>需求</span></a></h4><div class="language-tex line-numbers-mode" data-highlighter="prismjs" data-ext="tex" data-title="tex"><pre><code><span class="line">1. 上线下线</span>
<span class="line">2. 聊天</span>
<span class="line">3. 查询当前聊天室的用户名</span>
<span class="line">4. 可以修改自己的名字rename</span>
<span class="line">5. 超时退出 </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="技术点分析" tabindex="-1"><a class="header-anchor" href="#技术点分析"><span>技术点分析</span></a></h4><ul><li>socket、tcp编程</li><li>map <ul><li>存储用户</li><li>遍历</li><li>map添加删除</li></ul></li><li>go程。通道</li><li>Select模型（超时退出、主动退出）</li><li>定时器</li></ul><h4 id="实现步骤" tabindex="-1"><a class="header-anchor" href="#实现步骤"><span>实现步骤</span></a></h4><ul><li><p>socket</p></li><li><p>定义user</p></li><li><p>定义map</p></li><li><p>定义message通道</p></li><li><p>监听动作</p></li></ul><p><img src="http://image.alane.top/tp/image-20221127144654942.png" alt="image-20221127144654942"></p><h4 id="测试tcp工具netcat" tabindex="-1"><a class="header-anchor" href="#测试tcp工具netcat"><span>测试tcp工具netcat</span></a></h4><div class="language-tex line-numbers-mode" data-highlighter="prismjs" data-ext="tex" data-title="tex"><pre><code><span class="line">mac安装</span>
<span class="line">brew install netcat</span>
<span class="line">nc 127.0.0.1 8080 // 创建客户端</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://image.alane.top/tp/image-20221127155624212.png" alt="image-20221127155624212"></p>`,36))])}const m=p(u,[["render",d]]),b=JSON.parse('{"path":"/blogs/xuexi/go/gorumen.html","title":"go入门","lang":"en-US","frontmatter":{"title":"go入门","date":"2022-11-27T22:46:07.000Z","author":"Hireek","categories":["go"]},"headers":[{"level":2,"title":"GO","slug":"go","link":"#go","children":[{"level":3,"title":"指针","slug":"指针","link":"#指针","children":[]},{"level":3,"title":"go/协程","slug":"go-协程","link":"#go-协程","children":[]},{"level":3,"title":"Go exit","slug":"go-exit","link":"#go-exit","children":[]},{"level":3,"title":"channel","slug":"channel","link":"#channel","children":[]},{"level":3,"title":"Server Demo","slug":"server-demo","link":"#server-demo","children":[]},{"level":3,"title":"Client","slug":"client","link":"#client","children":[]},{"level":3,"title":"multiply socket Server","slug":"multiply-socket-server","link":"#multiply-socket-server","children":[]},{"level":3,"title":"Http-client","slug":"http-client","link":"#http-client","children":[]},{"level":3,"title":"http-server","slug":"http-server","link":"#http-server","children":[]},{"level":3,"title":"json序列化","slug":"json序列化","link":"#json序列化","children":[]},{"level":3,"title":"Json label","slug":"json-label","link":"#json-label","children":[]},{"level":3,"title":"聊天室实现","slug":"聊天室实现","link":"#聊天室实现","children":[]}]}],"git":{},"filePathRelative":"blogs/学习/go/go入门.md"}');export{m as comp,b as data};
