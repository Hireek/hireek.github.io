import{_ as p,c as l,b as n,a as t,d as a,e as c,r as i,o}from"./app-B4ALHgv8.js";const r={},u={href:"https://blog.csdn.net/Hireek/article/details/122162794%22%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%22",target:"_blank",rel:"noopener noreferrer"};function d(k,s){const e=i("ExternalLinkIcon");return o(),l("div",null,[s[3]||(s[3]=n("p",null,[n("strong",null,"并发处理的广泛应用是Amdahl定律代替摩尔定律成为计算机性能发展源动力的根本原因，也是人类压榨计算机运算能力的最有力武器。")],-1)),s[4]||(s[4]=n("p",null,[n("strong",null,"以下源码使用jdk11")],-1)),s[5]||(s[5]=n("h2",{id:"什么是多线程并发编程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#什么是多线程并发编程"},[n("span",null,"什么是多线程并发编程")])],-1)),s[6]||(s[6]=n("p",null,"首先要澄清并发和并行的概念，并发是指同一个时间段内多个任务同时都在执行，并且都没有执行结束，而并行是说在单位时间内多个任务同时在执行。并发任务强调在一个时间段内同时执行，而一个时间段由多个单位时间累积而成，所以说并发的多个任务在单位时间内不一定同时在执行。",-1)),s[7]||(s[7]=n("h2",{id:"为什么要并发",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#为什么要并发"},[n("span",null,"为什么要并发")])],-1)),n("p",null,[s[1]||(s[1]=a("这阐述的还不够清楚，应该从线程的出现开始谈起。为什么要引入线程之前说过了。")),n("a",u,[s[0]||(s[0]=a("并发编程线程基础")),c(e)]),s[2]||(s[2]=a("。"))]),s[8]||(s[8]=t(`<ul><li>提高资源的利用率</li><li>优先级</li><li>拆分任务（互不影响，必要时相互通信）</li></ul><p>不仅是因为计算机的运算能力强大了，还有一个很重要的原因是计算机的运算速度与它的存储和通信子系统的速度差距太大，大量的时间都花费在磁盘I/O、网络通信或者数据库访问上。如果不希望处理器在大部分时间里都处于等待其他资源的空闲状态，就必须使用一些手段去把处理器的运算能力“压榨”出来，否则就会造成很大的性能浪费，而让计算机同时处理几项任务则是最容易想到，也被证明是非常有效的“压榨”手段。</p><p>线程就可以并发，<strong>最大化利用cpu资源</strong>，通过时间片的轮转，线程切换。举个例子，点外卖。等外卖的时候我们可以继续工作，继续看电视。等外卖就相当于遇到磁盘I/O，可以切换线程去做别的任务。</p><h2 id="java中的线程安全" tabindex="-1"><a class="header-anchor" href="#java中的线程安全"><span>Java中的线程安全</span></a></h2><h3 id="什么是线程安全" tabindex="-1"><a class="header-anchor" href="#什么是线程安全"><span>什么是线程安全</span></a></h3><p>we can now define thread safety in a somewhat less circular way: a class is thread-safe when it continues to behave correctly when accessed from multiple threads. ——Java Concurrency In Practice</p><p>进一步补充解释：“当多个线程同时访问一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获得正确的结果，那就称这个对象是线程安全的。”</p><p>反之，即会出现线程安全问题。</p><p>一般会围绕<strong>原子性、可见性、有序性</strong>三个特性展开。</p><h2 id="原子性" tabindex="-1"><a class="header-anchor" href="#原子性"><span>原子性</span></a></h2><h2 id="可见性" tabindex="-1"><a class="header-anchor" href="#可见性"><span>可见性</span></a></h2><h2 id="有序性" tabindex="-1"><a class="header-anchor" href="#有序性"><span>有序性</span></a></h2><h2 id="synchronized" tabindex="-1"><a class="header-anchor" href="#synchronized"><span>synchronized</span></a></h2><h2 id="volatile" tabindex="-1"><a class="header-anchor" href="#volatile"><span>volatile</span></a></h2><p>我们先了解下JMM（屏蔽各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果）。</p><p>Java内存模型规定了所有的变量都存储在主内存(Main Memory)中(此处的主内存与介绍物理硬件时提到的主内存名字一样，两者也可以类比，但物理上它仅是虚拟机内存的一部分)。每条线程还有自己的工作内存(Working Memory，可与前面讲的处理器高速缓存类比)，线程的工作内存中保存了被该线程使用的变量的主内存副本[2]，线程对变量的所有操作(读取、赋值等)都必须在工作内存中进行，而不能直接读写主内存中的数据[3]。不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成，线程、主内存、工作内存三者的交互关系如图。</p><p><img src="https://img-blog.csdnimg.cn/14b4c3737d034e16903ba4fd18d4c5c1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBASGlyZWVr,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>volatile变量对所有线程是立即可见的，对volatile变量所有的<strong>写操作</strong>都能立刻反映到其他线程之中。</p><p>写操作后会跟上lock addl$0x0，(%esp)。Lock前缀的指令在多核处理器下有两个作用</p><ul><li>将当前处理器缓存行的数据写回到系统内存。</li><li>这个写回内存的操作会使在其他CPU里缓存了该内存地址的数据无效。</li></ul><p>这也是volatie实现可见性以及内存屏障的原因。具体这个lock前缀指令，目前一般是锁定缓存，通过缓存一致性协议实现。</p><p>JMM中也有对volatile变量定义的特殊规则的定义。</p><h2 id="cas-compare-and-swap" tabindex="-1"><a class="header-anchor" href="#cas-compare-and-swap"><span>CAS（Compare-and-Swap）</span></a></h2><p>基于冲突检测的乐观并发策略的一种。依赖硬件指令集。在IA64、x86指令集中有用cmpxchg指令完成的CAS功能，在SPARC-TSO中也有用casa指令实现的，而在ARM和PowerPC架构下，则需要使用一对ldrex/strex指令来完成LL/SC的功能。</p><p>CAS指令需要有三个操作数，分别是内存位置(在Java中可以简单地理解为变量的内存地址，用V表示)、旧的预期值(用A表示)和准备设置的新值(用B表示)。CAS指令执行时，当且仅当V符合A时，处理器才会用B更新V的值，否则它就不执行更新。但是，不管是否更新了V的值，都会返回V的旧值，上述的处理过程是一个原子操作，执行期间不会被其他线程中断。</p><p>在JDK5之后，Java类库中才开始使用CAS操作，该操作由sun.misc.Unsafe类里面的compareAndSwapInt()和compareAndSwapLong()等几个方法包装提供。JDK9之后，Java类库才在VarHandle类里开放了面向用户程序使用的CAS操作。</p><p>还有个经典的ABA问题。</p><h2 id="unsafe类" tabindex="-1"><a class="header-anchor" href="#unsafe类"><span>Unsafe类</span></a></h2><p>Unsafe故名思义，不安全的类，注释的第一句，A collection of methods for performing low-level, unsafe operations。提供了硬件级别的原子性操作。具体方法有很多，包括上面的CAS。</p><p>官方不推荐开发者直接使用，在JDK10时才将Unsafe的部分功能通过VarHandle开放给外部使用。</p><p>Jdk8，rt.jar下sun.misc.Unsafe。</p><p>jdk9，sun.misc.Unsafe被移动到com.unsupported模块下；又新增了jdk.internal.misc.Unsafe。</p><h3 id="如何使用" tabindex="-1"><a class="header-anchor" href="#如何使用"><span>如何使用？</span></a></h3><p>jdk.internal.misc.Unsafe笔者做了下尝试仍报错，之后会再尝试一下。。。</p><p><img src="https://img-blog.csdnimg.cn/862706636eea4bc4aa97a878d2d69b0d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBASGlyZWVr,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/baf12c8587574c40aa1f73871d01bb3e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBASGlyZWVr,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/403a4db2b1a045d6baa1edbea5e46173.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBASGlyZWVr,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>于是就针对<strong>sun.misc.Unsafe</strong>，尽管该类是一个工具类，通过单例模式，我们似乎可以直接调用，实际会检查类加载器类型。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Unsafe</span> <span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> caller <span class="token operator">=</span> <span class="token class-name">Reflection</span><span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">VM</span><span class="token punctuation">.</span><span class="token function">isSystemDomainLoader</span><span class="token punctuation">(</span>caller<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 判断是不是根类加载器或者平台类加载器，</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SecurityException</span><span class="token punctuation">(</span><span class="token string">&quot;Unsafe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> theUnsafe<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line">     * Returns true if the given class loader is the bootstrap class loader</span>
<span class="line">     * or the platform class loader.</span>
<span class="line">     */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSystemDomainLoader</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> loader <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> loader <span class="token operator">==</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getPlatformClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但反射可以直接调用。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span><span class="token class-name">Unsafe</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * UnsafeTest demo</span>
<span class="line"> *</span>
<span class="line"> * <span class="token keyword">@author</span> Hireek</span>
<span class="line"> * <span class="token keyword">@date</span> 2021/12/27 22:49</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnsafeTest</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Unsafe</span> unsafe<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> stateOffest<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;theUnsafe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            unsafe <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Unsafe</span><span class="token punctuation">)</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            stateOffest <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span><span class="token punctuation">(</span><span class="token class-name">UnsafeTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;state&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getLocalizedMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">UnsafeTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnsafeTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Boolean</span> success <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> stateOffest<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token doc-comment comment">/** run result</span>
<span class="line"> true</span>
<span class="line">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="伪共享问题-false-sharing" tabindex="-1"><a class="header-anchor" href="#伪共享问题-false-sharing"><span>伪共享问题（False Sharing）</span></a></h2><p>伪共享是处理并发底层细节时一种经常需要考虑的问题，现代中央处理器的缓存系统中是以缓存行(Cache Line)为单位存储的，当多线程修改互相独立的变量时，如果这些变量恰好共享同一个缓存行（局部性原理），就会彼此影响(写回、无效化或者同步)而导致性能降低。</p><h3 id="如何避免伪共享问题" tabindex="-1"><a class="header-anchor" href="#如何避免伪共享问题"><span>如何避免伪共享问题</span></a></h3><p>JDK8提供了一个sun.misc.Contended注解，用来解决伪共享问题。</p><h2 id="锁的概述" tabindex="-1"><a class="header-anchor" href="#锁的概述"><span>锁的概述</span></a></h2><h3 id="悲观锁与乐观锁" tabindex="-1"><a class="header-anchor" href="#悲观锁与乐观锁"><span>悲观锁与乐观锁</span></a></h3><p>乐观即尽可能的无锁化，加锁即悲观。</p><h3 id="独占锁与共享锁" tabindex="-1"><a class="header-anchor" href="#独占锁与共享锁"><span>独占锁与共享锁</span></a></h3><p>独占锁即排他锁，共享锁故名思义是锁是共享的，即多个线程能占有锁。</p><h3 id="公平锁与非公平锁" tabindex="-1"><a class="header-anchor" href="#公平锁与非公平锁"><span>公平锁与非公平锁</span></a></h3><p>类比排队，是否可以插队。</p><h3 id="可重入锁" tabindex="-1"><a class="header-anchor" href="#可重入锁"><span>可重入锁</span></a></h3><p>当一个线程要获取一个被其他线程持有的独占锁时，该线程会被阻塞，那么当一个线程再次获取它自己己经获取的锁时是否会被阻塞呢?如果不被阻塞，那么我们说该锁是可重入的，也就是只要该线程获取了该锁，那么可以无限次数(在高级篇中我们将知道，严格来说是有限次数)地进入被该锁锁住的代码。</p><p>愿与君共勉</p><p>未完待遇...</p>`,54))])}const v=p(r,[["render",d]]),h=JSON.parse('{"path":"/blogs/shu/Javabingfabianchengzhimei/bingfabianchengdeqitazhishi.html","title":"并发编程的其他知识","lang":"en-US","frontmatter":{"title":"并发编程的其他知识","date":"2021-12-27T00:00:46.000Z","author":"Hireek","tags":["并发"],"categories":["Java并发编程之美"]},"headers":[{"level":2,"title":"什么是多线程并发编程","slug":"什么是多线程并发编程","link":"#什么是多线程并发编程","children":[]},{"level":2,"title":"为什么要并发","slug":"为什么要并发","link":"#为什么要并发","children":[]},{"level":2,"title":"Java中的线程安全","slug":"java中的线程安全","link":"#java中的线程安全","children":[{"level":3,"title":"什么是线程安全","slug":"什么是线程安全","link":"#什么是线程安全","children":[]}]},{"level":2,"title":"原子性","slug":"原子性","link":"#原子性","children":[]},{"level":2,"title":"可见性","slug":"可见性","link":"#可见性","children":[]},{"level":2,"title":"有序性","slug":"有序性","link":"#有序性","children":[]},{"level":2,"title":"synchronized","slug":"synchronized","link":"#synchronized","children":[]},{"level":2,"title":"volatile","slug":"volatile","link":"#volatile","children":[]},{"level":2,"title":"CAS（Compare-and-Swap）","slug":"cas-compare-and-swap","link":"#cas-compare-and-swap","children":[]},{"level":2,"title":"Unsafe类","slug":"unsafe类","link":"#unsafe类","children":[{"level":3,"title":"如何使用？","slug":"如何使用","link":"#如何使用","children":[]}]},{"level":2,"title":"伪共享问题（False Sharing）","slug":"伪共享问题-false-sharing","link":"#伪共享问题-false-sharing","children":[{"level":3,"title":"如何避免伪共享问题","slug":"如何避免伪共享问题","link":"#如何避免伪共享问题","children":[]}]},{"level":2,"title":"锁的概述","slug":"锁的概述","link":"#锁的概述","children":[{"level":3,"title":"悲观锁与乐观锁","slug":"悲观锁与乐观锁","link":"#悲观锁与乐观锁","children":[]},{"level":3,"title":"独占锁与共享锁","slug":"独占锁与共享锁","link":"#独占锁与共享锁","children":[]},{"level":3,"title":"公平锁与非公平锁","slug":"公平锁与非公平锁","link":"#公平锁与非公平锁","children":[]},{"level":3,"title":"可重入锁","slug":"可重入锁","link":"#可重入锁","children":[]}]}],"git":{},"filePathRelative":"blogs/书/Java并发编程之美/并发编程的其他知识.md"}');export{v as comp,h as data};
