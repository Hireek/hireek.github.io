import{_ as a,c as l,a as n,o as h}from"./app-B4ALHgv8.js";const i={};function s(r,e){return h(),l("div",null,e[0]||(e[0]=[n('<h2 id="代码的坏味道" tabindex="-1"><a class="header-anchor" href="#代码的坏味道"><span>代码的坏味道</span></a></h2><h3 id="神秘命名" tabindex="-1"><a class="header-anchor" href="#神秘命名"><span>神秘命名</span></a></h3><h3 id="重复代码" tabindex="-1"><a class="header-anchor" href="#重复代码"><span>重复代码</span></a></h3><h3 id="过长函数" tabindex="-1"><a class="header-anchor" href="#过长函数"><span>过长函数</span></a></h3><h3 id="过长的参数列表" tabindex="-1"><a class="header-anchor" href="#过长的参数列表"><span>过长的参数列表</span></a></h3><p>同一个抽象上，可以抽象成类</p><h3 id="全局数据" tabindex="-1"><a class="header-anchor" href="#全局数据"><span>全局数据</span></a></h3><p>控制全局变量的访问和修改，安全性</p><h3 id="可变数据" tabindex="-1"><a class="header-anchor" href="#可变数据"><span>可变数据</span></a></h3><p>ddd的值对象 solve</p><h3 id="发散式变化" tabindex="-1"><a class="header-anchor" href="#发散式变化"><span>发散式变化</span></a></h3><p>逻辑拆分，领域拆分。</p><h3 id="霰弹式修改" tabindex="-1"><a class="header-anchor" href="#霰弹式修改"><span>霰弹式修改</span></a></h3><p>方法内联，组合模块。之后再拆成小模块。</p><h3 id="依恋情结" tabindex="-1"><a class="header-anchor" href="#依恋情结"><span>依恋情结</span></a></h3><h3 id="数据泥团" tabindex="-1"><a class="header-anchor" href="#数据泥团"><span>数据泥团</span></a></h3><h3 id="基本类型偏执" tabindex="-1"><a class="header-anchor" href="#基本类型偏执"><span>基本类型偏执</span></a></h3><p>赋予对象</p><h3 id="重复的switch-if-else" tabindex="-1"><a class="header-anchor" href="#重复的switch-if-else"><span>重复的switch，if else</span></a></h3><p>多态</p><h3 id="循环语句" tabindex="-1"><a class="header-anchor" href="#循环语句"><span>循环语句</span></a></h3><p>管道取代循环，filter，map。</p><h3 id="冗赘的元素" tabindex="-1"><a class="header-anchor" href="#冗赘的元素"><span>冗赘的元素</span></a></h3><p>多余</p><h3 id="夸夸其谈通用性" tabindex="-1"><a class="header-anchor" href="#夸夸其谈通用性"><span>夸夸其谈通用性</span></a></h3><p>如无必要，勿增实体</p><h3 id="临时字段" tabindex="-1"><a class="header-anchor" href="#临时字段"><span>临时字段</span></a></h3><p>某种特殊情况而设的字段，无法理解</p><h3 id="过长的消息链" tabindex="-1"><a class="header-anchor" href="#过长的消息链"><span>过长的消息链</span></a></h3><h3 id="中间人" tabindex="-1"><a class="header-anchor" href="#中间人"><span>中间人</span></a></h3><p>过度委托</p><h3 id="内幕交易" tabindex="-1"><a class="header-anchor" href="#内幕交易"><span>内幕交易</span></a></h3><h3 id="过大的类" tabindex="-1"><a class="header-anchor" href="#过大的类"><span>过大的类</span></a></h3><h3 id="纯数据类" tabindex="-1"><a class="header-anchor" href="#纯数据类"><span>纯数据类</span></a></h3><h3 id="被拒绝的遗赠" tabindex="-1"><a class="header-anchor" href="#被拒绝的遗赠"><span>被拒绝的遗赠</span></a></h3><h3 id="注释" tabindex="-1"><a class="header-anchor" href="#注释"><span>注释</span></a></h3><p>此地无银三百两</p><h2 id="重构的记录格式" tabindex="-1"><a class="header-anchor" href="#重构的记录格式"><span>重构的记录格式</span></a></h2><p>我采用一种标准格式。每个重构手法都有如下5个部分。</p><ul><li>首先是名称</li><li>速写</li><li>动机，为什么需要做这个重构，什么情况下不该做这个重构</li><li>做法，如何</li></ul><h2 id="第一组重构" tabindex="-1"><a class="header-anchor" href="#第一组重构"><span>第一组重构</span></a></h2><h3 id="提炼函数-变量" tabindex="-1"><a class="header-anchor" href="#提炼函数-变量"><span>提炼函数/变量</span></a></h3><p>如果你需要花时间浏览一段代码才能弄清它到底在干什 么，那么就应该将其提炼到一个函数中，并根据它所做的事为其命名。以后再读 到这段代码时，你一眼就能看到函数的用途，大多数时候根本不需要关心函数如 何达成其用途(这是函数体内干的事)。</p><p>小函数得有个好名字才行，所以你必须在命名上花心思。起好名字需要练 习，不过一旦你掌握了其中的技巧，就能写出很有自描述性的代码。</p><h4 id="做法" tabindex="-1"><a class="header-anchor" href="#做法"><span>做法</span></a></h4><h3 id="内联函数-变量" tabindex="-1"><a class="header-anchor" href="#内联函数-变量"><span>内联函数/变量</span></a></h3><h3 id="改变函数声明" tabindex="-1"><a class="header-anchor" href="#改变函数声明"><span>改变函数声明</span></a></h3><h3 id="封装变量" tabindex="-1"><a class="header-anchor" href="#封装变量"><span>封装变量</span></a></h3><h3 id="引入参数对象" tabindex="-1"><a class="header-anchor" href="#引入参数对象"><span>引入参数对象</span></a></h3><h3 id="函数组合成类" tabindex="-1"><a class="header-anchor" href="#函数组合成类"><span>函数组合成类</span></a></h3><h3 id="函数组合变换" tabindex="-1"><a class="header-anchor" href="#函数组合变换"><span>函数组合变换</span></a></h3><h3 id="拆分阶段" tabindex="-1"><a class="header-anchor" href="#拆分阶段"><span>拆分阶段</span></a></h3>',52)]))}const t=a(i,[["render",s]]),c=JSON.parse('{"path":"/blogs/daimaxiulian/zhonggou/zhonggou：gaishanjiyoudaima.html","title":"重构：改善既有代码","lang":"en-US","frontmatter":{"title":"重构：改善既有代码","date":"2022-04-16T15:28:04.000Z","tags":["重构","代码"],"author":"Hireek","categories":["重构"]},"headers":[{"level":2,"title":"代码的坏味道","slug":"代码的坏味道","link":"#代码的坏味道","children":[{"level":3,"title":"神秘命名","slug":"神秘命名","link":"#神秘命名","children":[]},{"level":3,"title":"重复代码","slug":"重复代码","link":"#重复代码","children":[]},{"level":3,"title":"过长函数","slug":"过长函数","link":"#过长函数","children":[]},{"level":3,"title":"过长的参数列表","slug":"过长的参数列表","link":"#过长的参数列表","children":[]},{"level":3,"title":"全局数据","slug":"全局数据","link":"#全局数据","children":[]},{"level":3,"title":"可变数据","slug":"可变数据","link":"#可变数据","children":[]},{"level":3,"title":"发散式变化","slug":"发散式变化","link":"#发散式变化","children":[]},{"level":3,"title":"霰弹式修改","slug":"霰弹式修改","link":"#霰弹式修改","children":[]},{"level":3,"title":"依恋情结","slug":"依恋情结","link":"#依恋情结","children":[]},{"level":3,"title":"数据泥团","slug":"数据泥团","link":"#数据泥团","children":[]},{"level":3,"title":"基本类型偏执","slug":"基本类型偏执","link":"#基本类型偏执","children":[]},{"level":3,"title":"重复的switch，if else","slug":"重复的switch-if-else","link":"#重复的switch-if-else","children":[]},{"level":3,"title":"循环语句","slug":"循环语句","link":"#循环语句","children":[]},{"level":3,"title":"冗赘的元素","slug":"冗赘的元素","link":"#冗赘的元素","children":[]},{"level":3,"title":"夸夸其谈通用性","slug":"夸夸其谈通用性","link":"#夸夸其谈通用性","children":[]},{"level":3,"title":"临时字段","slug":"临时字段","link":"#临时字段","children":[]},{"level":3,"title":"过长的消息链","slug":"过长的消息链","link":"#过长的消息链","children":[]},{"level":3,"title":"中间人","slug":"中间人","link":"#中间人","children":[]},{"level":3,"title":"内幕交易","slug":"内幕交易","link":"#内幕交易","children":[]},{"level":3,"title":"过大的类","slug":"过大的类","link":"#过大的类","children":[]},{"level":3,"title":"纯数据类","slug":"纯数据类","link":"#纯数据类","children":[]},{"level":3,"title":"被拒绝的遗赠","slug":"被拒绝的遗赠","link":"#被拒绝的遗赠","children":[]},{"level":3,"title":"注释","slug":"注释","link":"#注释","children":[]}]},{"level":2,"title":"重构的记录格式","slug":"重构的记录格式","link":"#重构的记录格式","children":[]},{"level":2,"title":"第一组重构","slug":"第一组重构","link":"#第一组重构","children":[{"level":3,"title":"提炼函数/变量","slug":"提炼函数-变量","link":"#提炼函数-变量","children":[]},{"level":3,"title":"内联函数/变量","slug":"内联函数-变量","link":"#内联函数-变量","children":[]},{"level":3,"title":"改变函数声明","slug":"改变函数声明","link":"#改变函数声明","children":[]},{"level":3,"title":"封装变量","slug":"封装变量","link":"#封装变量","children":[]},{"level":3,"title":"引入参数对象","slug":"引入参数对象","link":"#引入参数对象","children":[]},{"level":3,"title":"函数组合成类","slug":"函数组合成类","link":"#函数组合成类","children":[]},{"level":3,"title":"函数组合变换","slug":"函数组合变换","link":"#函数组合变换","children":[]},{"level":3,"title":"拆分阶段","slug":"拆分阶段","link":"#拆分阶段","children":[]}]}],"git":{},"filePathRelative":"blogs/代码修炼/重构/重构：改善既有代码.md"}');export{t as comp,c as data};
