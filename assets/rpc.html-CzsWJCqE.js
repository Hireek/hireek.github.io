import{_ as s,c as a,a as p,o as e}from"./app-B4ALHgv8.js";const t={};function l(i,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h2 id="rpc" tabindex="-1"><a class="header-anchor" href="#rpc"><span>RPC</span></a></h2><h3 id="什么是rpc" tabindex="-1"><a class="header-anchor" href="#什么是rpc"><span>什么是RPC</span></a></h3><p>Remote Procedure Call Protocol —— 远程过程调用协议</p><p>IPC： 进程间通信</p><p>RPC：远程进通信 —— 应用层协议（http协议同层）。底层使用 TCP 实现。</p><blockquote><p>回顾：</p><p>OSI 7 层模型架构：物、数、网、传、会、表、应</p><p>TCP/IP 4 层架构：链路层、网络层、传输层、应用层</p></blockquote><ul><li><p>理解RPC：</p><ul><li><strong>==像调用本地函数一样，去调用远程函数。==</strong><ul><li>通过rpc协议，传递：函数名、函数参数。达到在本地，调用远端函数，得返回值到本地的目标。</li></ul></li></ul></li><li><p>为什么微服务使用 RPC：</p><ol><li><p>每个服务都被封装成 进程。彼此”独立“。</p></li><li><p>进程和进程之间，可以使用不同的语言实现。</p></li></ol></li></ul><h3 id="socket回顾" tabindex="-1"><a class="header-anchor" href="#socket回顾"><span>socket回顾</span></a></h3><p>-远程网络通信-</p><blockquote><p>回顾：Go语言 一般性 网络socket通信</p><p>server端：</p><p>​ net.Listen() —— listener 创建监听器</p><p>​ listener.Accpet() —— conn 启动监听，建立连接</p><p>​ conn.read()</p><p>​ conn.write()</p><p>​ defer conn.Close() / listener.Close()</p><p>client端：</p><p>​ net.Dial() —— conn</p><p>​ conn.Write()</p><p>​ conn.Read()</p><p>​ defer conn.Close()</p></blockquote><h3 id="rpc使用步骤" tabindex="-1"><a class="header-anchor" href="#rpc使用步骤"><span>rpc使用步骤</span></a></h3><p>---- 服务端：</p><ol><li><p>注册 rpc 服务对象。给对象绑定方法（ 1. 定义类， 2. 绑定类方法 ）</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">rpc<span class="token punctuation">.</span><span class="token function">RegisterName</span><span class="token punctuation">(</span><span class="token string">&quot;服务名&quot;</span>，回调对象<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>创建监听器</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">listener<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>建立连接</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> listener<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>将连接 绑定 rpc 服务。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">rpc<span class="token punctuation">.</span><span class="token function">ServeConn</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><p>---- 客户端：</p><ol><li><p>用 rpc 连接服务器。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> rpc<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>调用远程函数。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">conn<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">&quot;服务名.方法名&quot;</span><span class="token punctuation">,</span> 传入参数<span class="token punctuation">,</span> 传出参数<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h4 id="代码" tabindex="-1"><a class="header-anchor" href="#代码"><span>代码</span></a></h4><p>Server</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">   <span class="token string">&quot;fmt&quot;</span></span>
<span class="line">   <span class="token string">&quot;net&quot;</span></span>
<span class="line">   <span class="token string">&quot;net/rpc&quot;</span></span>
<span class="line">   <span class="token string">&quot;strings&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> World <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>w World<span class="token punctuation">)</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> resp <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token operator">*</span>resp <span class="token operator">=</span> name <span class="token operator">+</span> strings<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span>
<span class="line">   <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   err <span class="token operator">:=</span> rpc<span class="token punctuation">.</span><span class="token function">RegisterName</span><span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>World<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Register world&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">return</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">   listen<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;127.0.0.1:8088&quot;</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;net.Listen&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">   <span class="token keyword">defer</span> listen<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;开始监听...&quot;</span><span class="token punctuation">)</span></span>
<span class="line">   conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> listen<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;accept error - &gt;&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">   <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;连接建立成功...&quot;</span><span class="token punctuation">)</span></span>
<span class="line">   rpc<span class="token punctuation">.</span><span class="token function">ServeConn</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>client</strong></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">   <span class="token string">&quot;fmt&quot;</span></span>
<span class="line">   <span class="token string">&quot;net/rpc&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// gob序列化</span></span>
<span class="line">   client<span class="token punctuation">,</span> err <span class="token operator">:=</span> rpc<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;127.0.0.1:8088&quot;</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;rpc.Dial&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">   <span class="token keyword">defer</span> client<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token keyword">var</span> resp <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span></span>
<span class="line">   err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">&quot;world.HelloWorld&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;feng&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>resp<span class="token punctuation">)</span></span>
<span class="line">   <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;resp ===&gt; &quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>resp<span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="json版" tabindex="-1"><a class="header-anchor" href="#json版"><span>json版</span></a></h3><p>rpc替换为jsonrpc即可</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;{&quot;method&quot;:&quot;world.HelloWorld&quot;,&quot;params&quot;:[&quot;李白&quot;],&quot;id&quot;:0}&#39;</span> <span class="token operator">|</span> <span class="token function">nc</span> <span class="token number">127.0</span>.0.1 <span class="token number">8800</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="http://image.alane.top/tp/2022/11/29/6385f42d67214.png" alt="image-20221129195941071"></p><p><strong>如果，绑定方法返回值的 error 不为空？ 无论传出参数是否有值，服务端都不会返回数据。</strong></p><h3 id="rpc封装" tabindex="-1"><a class="header-anchor" href="#rpc封装"><span>rpc封装</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">   <span class="token string">&quot;net/rpc&quot;</span></span>
<span class="line">   <span class="token string">&quot;net/rpc/jsonrpc&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> IHelloWorld <span class="token keyword">interface</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token function">HelloWorld</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> resp <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">registerHelloWorld</span><span class="token punctuation">(</span>helloWorld IHelloWorld<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">return</span> rpc<span class="token punctuation">.</span><span class="token function">RegisterName</span><span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">,</span> helloWorld<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> IClient <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">   c <span class="token operator">*</span>rpc<span class="token punctuation">.</span>Client</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">InitClient</span><span class="token punctuation">(</span>network <span class="token builtin">string</span><span class="token punctuation">,</span> address <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>IClient<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   client<span class="token punctuation">,</span> err <span class="token operator">:=</span> jsonrpc<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> address<span class="token punctuation">)</span></span>
<span class="line">   <span class="token keyword">return</span> IClient<span class="token punctuation">{</span>client<span class="token punctuation">}</span><span class="token punctuation">,</span> err</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>IClient<span class="token punctuation">)</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span>arg <span class="token builtin">string</span><span class="token punctuation">,</span> resp <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">return</span> client<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">&quot;world.HelloWorld&quot;</span><span class="token punctuation">,</span> arg<span class="token punctuation">,</span> resp<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="protobuf" tabindex="-1"><a class="header-anchor" href="#protobuf"><span>Protobuf</span></a></h3><p>--- Google</p><h4 id="编写的注意事项" tabindex="-1"><a class="header-anchor" href="#编写的注意事项"><span>编写的注意事项</span></a></h4><ol><li>message 成员编号， 可以不从1开始, 但是不能重复. -- 不能使用 19000 - 19999</li><li>可以使用 message 嵌套。</li><li>定义数组、切片 使用 repeated 关键字</li><li>可以使用枚举 enum</li><li>可以使用联合体。 oneof 关键字。成员编号，不能重复。</li></ol><h4 id="编译protobuf" tabindex="-1"><a class="header-anchor" href="#编译protobuf"><span>编译protobuf</span></a></h4><blockquote><p>回顾：C++ 编译 命令：</p><p>protoc --cpp_out=./ *.proto ---&gt; xxx.pb.cc 和 xxx.pb.h 文件</p></blockquote><ul><li>go 语言中 编译命令：</li></ul><p><code>protoc --go_out=./ *proto</code> ---&gt; xxx.pb.go 文件。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># https://github.com/protocolbuffers/protobuf-go/releases/tag/v1.28.1</span></span>
<span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOPATH</span><span class="token operator">=</span><span class="token environment constant">$HOME</span>/sdk/go1.17.1/</span>
<span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOBIN</span><span class="token operator">=</span><span class="token variable">$GOPATH</span>/bin</span>
<span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$GOBIN</span>:<span class="token environment constant">$PATH</span>&quot;</span></span>
<span class="line"><span class="token function">mv</span> protoc-gen-go to <span class="token variable">$GOPATH</span>/bin</span>
<span class="line"><span class="token comment"># google.golang.org</span></span>
<span class="line"><span class="token function">mkdir</span> google.golang.org</span>
<span class="line"><span class="token builtin class-name">cd</span> google.golang.org</span>
<span class="line"><span class="token function">git</span> clone git@github.com:protocolbuffers/protobuf-go.git</span>
<span class="line"><span class="token function">mv</span> protobuf-go protobuf</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="添加rpc服务" tabindex="-1"><a class="header-anchor" href="#添加rpc服务"><span>添加rpc服务</span></a></h4><ul><li>语法</li></ul><div class="language-protobuf line-numbers-mode" data-highlighter="prismjs" data-ext="protobuf" data-title="protobuf"><pre><code><span class="line"><span class="token keyword">service</span> 服务名 <span class="token punctuation">{</span></span>
<span class="line">		rpc 函数名（参数，消息体） <span class="token keyword">returns</span> （返回值，消息）</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mac配置gRpc</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">brew <span class="token function">install</span> go <span class="token comment">#运行完可不修改环境变量</span></span>
<span class="line"></span>
<span class="line">brew <span class="token function">install</span> automake</span>
<span class="line"> </span>
<span class="line">brew <span class="token function">install</span> libtool</span>
<span class="line"> </span>
<span class="line">brew <span class="token function">install</span> protobuf</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="brew" tabindex="-1"><a class="header-anchor" href="#brew"><span>brew</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"></span>
<span class="line">brew <span class="token function">install</span> grpc</span>
<span class="line">brew <span class="token function">install</span> protobuf</span>
<span class="line">brew <span class="token function">install</span> protoc-gen-go</span>
<span class="line">brew <span class="token function">install</span> protoc-gen-go-grpc</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="gitclone-go-get" tabindex="-1"><a class="header-anchor" href="#gitclone-go-get"><span>gitclone/go get</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"></span>
<span class="line"><span class="token function">git</span> clone git@github.com:golang/protobuf</span>
<span class="line"><span class="token comment"># 编译protoc-gen-go</span></span>
<span class="line">go <span class="token function">install</span> /src/google.golang.org/protobuf</span>
<span class="line"><span class="token comment"># 获取package</span></span>
<span class="line">go get <span class="token parameter variable">-u</span> google.golang.org/grpc</span>
<span class="line"><span class="token comment"># 失败的话</span></span>
<span class="line"><span class="token function">git</span> clone https://github.com/grpc/grpc-go.git <span class="token variable">$env</span>:GOPATH<span class="token punctuation">\\</span>src<span class="token punctuation">\\</span>google.golang.org<span class="token punctuation">\\</span>grpc</span>
<span class="line"><span class="token function">git</span> clone https://github.com/golang/net.git <span class="token variable">$env</span>:GOPATH<span class="token punctuation">\\</span>src<span class="token punctuation">\\</span>golang.org<span class="token punctuation">\\</span>x<span class="token punctuation">\\</span>net</span>
<span class="line"><span class="token function">git</span> clone https://github.com/golang/text.git <span class="token variable">$env</span>:GOPATH<span class="token punctuation">\\</span>src<span class="token punctuation">\\</span>golang.org<span class="token punctuation">\\</span>x<span class="token punctuation">\\</span>text</span>
<span class="line"><span class="token function">git</span> clone https://github.com/google/go-genproto.git <span class="token variable">$env</span>:GOPATH<span class="token punctuation">\\</span>src<span class="token punctuation">\\</span>google.golang.org<span class="token punctuation">\\</span>genproto</span>
<span class="line"><span class="token comment"># 编译protoc-gen-go</span></span>
<span class="line">protoc-gen-go-grpc</span>
<span class="line"><span class="token comment"># 编译</span></span>
<span class="line">protoc --go-grpc_out<span class="token operator">=</span>./ *.proto  </span>
<span class="line">protoc <span class="token parameter variable">--go_out</span><span class="token operator">=</span>./ *proto</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://image.alane.top/tp/2022/11/30/6387776fb9450.png" alt="image-20221130233159156"></p><p>编译完成将exec文件放goroot/bin目录即可</p><p>运行<code>protoc --go-grpc_out=./ *.proto </code><img src="http://image.alane.top/tp/2022/11/30/638777b501d8e.png" alt="image-20221130233308622"></p><h4 id="grpc-server" tabindex="-1"><a class="header-anchor" href="#grpc-server"><span>grpc-server</span></a></h4><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">   <span class="token string">&quot;context&quot;</span></span>
<span class="line">   <span class="token string">&quot;fmt&quot;</span></span>
<span class="line">   <span class="token string">&quot;google.golang.org/grpc&quot;</span></span>
<span class="line">   <span class="token string">&quot;net&quot;</span></span>
<span class="line">   <span class="token string">&quot;pb&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> World2 <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">   pb<span class="token punctuation">.</span>UnimplementedHelloServer</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>World2<span class="token punctuation">)</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span>c context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> x <span class="token operator">*</span>pb<span class="token punctuation">.</span>Teacher<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>pb<span class="token punctuation">.</span>Teacher<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   x<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;xx&quot;</span></span>
<span class="line">   x<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span></span>
<span class="line">   <span class="token keyword">return</span> x<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">var</span> grpcServer <span class="token operator">=</span> grpc<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">   pb<span class="token punctuation">.</span><span class="token function">RegisterHelloServer</span><span class="token punctuation">(</span>grpcServer<span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>World2<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">   listen<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;127.0.0.1:8800&quot;</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;net.Listen&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">   <span class="token keyword">defer</span> listen<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;开始监听...&quot;</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token comment">//conn, err := listen.Accept()</span></span>
<span class="line">   <span class="token comment">//if err != nil {</span></span>
<span class="line">   <span class="token comment">// fmt.Println(&quot;accept error - &gt;&quot;, err)</span></span>
<span class="line">   <span class="token comment">//}</span></span>
<span class="line">   <span class="token comment">//defer conn.Close()</span></span>
<span class="line"></span>
<span class="line">   <span class="token comment">//fmt.Println(&quot;连接建立成功...&quot;)</span></span>
<span class="line">   <span class="token comment">//rpc.ServeConn(conn)</span></span>
<span class="line">   grpcServer<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span>listen<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="grpc-client" tabindex="-1"><a class="header-anchor" href="#grpc-client"><span>grpc-client</span></a></h4><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">   <span class="token string">&quot;context&quot;</span></span>
<span class="line">   <span class="token string">&quot;fmt&quot;</span></span>
<span class="line">   <span class="token string">&quot;google.golang.org/grpc&quot;</span></span>
<span class="line">   <span class="token string">&quot;pb&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   dial<span class="token punctuation">,</span> err <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1:8800&quot;</span><span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">WithInsecure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;net.Listen&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">   <span class="token keyword">defer</span> dial<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">   client <span class="token operator">:=</span> pb<span class="token punctuation">.</span><span class="token function">NewHelloClient</span><span class="token punctuation">(</span>dial<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">   teacher<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">HelloWorld</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>pb<span class="token punctuation">.</span>Teacher<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>teacher<span class="token punctuation">.</span>Name<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,52)]))}const o=s(t,[["render",l]]),u=JSON.parse('{"path":"/blogs/xuexi/go/rpc.html","title":"rpc","lang":"en-US","frontmatter":{"title":"rpc","date":"2022-12-02T23:30:08.000Z","author":"Hireek","categories":["go"]},"headers":[{"level":2,"title":"RPC","slug":"rpc","link":"#rpc","children":[{"level":3,"title":"什么是RPC","slug":"什么是rpc","link":"#什么是rpc","children":[]},{"level":3,"title":"socket回顾","slug":"socket回顾","link":"#socket回顾","children":[]},{"level":3,"title":"rpc使用步骤","slug":"rpc使用步骤","link":"#rpc使用步骤","children":[]},{"level":3,"title":"json版","slug":"json版","link":"#json版","children":[]},{"level":3,"title":"rpc封装","slug":"rpc封装","link":"#rpc封装","children":[]},{"level":3,"title":"Protobuf","slug":"protobuf","link":"#protobuf","children":[]},{"level":3,"title":"gitclone/go get","slug":"gitclone-go-get","link":"#gitclone-go-get","children":[]}]}],"git":{},"filePathRelative":"blogs/学习/go/rpc.md"}');export{o as comp,u as data};
